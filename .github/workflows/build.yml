name: Build And Deploy

on:
  workflow_dispatch:
    inputs:
      build-mode:
        description: "Build mode : Test / Release"
        required: true

  workflow_call:
    inputs:
      build-mode:
        required: true
        type: string
    secrets:
      RELEASE_FTP_JSON:
        required: true
      TEST_FTP_JSON:
        required: true
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      GOOGLE_JSON_KEY:
        required: false

env:
  # Release
  LOAD_RELEASE_DIR: "_UnipromReleaseServerData"
  BUILD_RELEASE_METHOD: "Uniprom.Editor.AssetBuilder.BuildRelease"
  # Test
  LOAD_TEST_DIR: "_UnipromTestServerData"
  BUILD_TEST_METHOD: "Uniprom.Editor.AssetBuilder.BuildTest"

jobs:
  check-input:
    name: Check Input
    runs-on: ubuntu-latest
    steps:
      - name: Check Value
        run: |
          if ${{ inputs.build-mode != 'Test' && inputs.build-mode != 'Release' }}; then
            echo ::error:: "Specify Test or Release. value: ${{ inputs.build-mode }}"
            exit 1
          else
            echo "Valid input value"
          fi

  set-value:
    needs: check-input
    name: Set Value - ${{ inputs.build-mode }}
    runs-on: ubuntu-latest
    outputs:
      LOAD_DIR: ${{ steps.set-value.outputs.LOAD_DIR }}
      BUILD_METHOD: ${{ steps.set-value.outputs.BUILD_METHOD }}
      GOOGLE_JSON_KEY_PATH: ${{ steps.set-value.outputs.GOOGLE_JSON_KEY_PATH }}
    steps:
      - name: Set Value
        id: set-value
        run: |
          if ${{ inputs.build-mode == 'Release' }}; then
            echo "LOAD_DIR=${{ env.LOAD_RELEASE_DIR }}" >> $GITHUB_OUTPUT
            echo "BUILD_METHOD=${{ env.BUILD_RELEASE_METHOD }}" >> $GITHUB_OUTPUT
          else
            echo "LOAD_DIR=${{ env.LOAD_TEST_DIR }}" >> $GITHUB_OUTPUT
            echo "BUILD_METHOD=${{ env.BUILD_TEST_METHOD }}" >> $GITHUB_OUTPUT
          fi

          KEY_BASE64=$(echo -n "${{ secrets.GOOGLE_JSON_KEY }}" | base64)
          
          if [ ${#KEY_BASE64} -gt 0 ]; then
            echo "GOOGLE_JSON_KEY_PATH=google_json_key.json" >> $GITHUB_OUTPUT
          else
            echo "GOOGLE_JSON_KEY_PATH=" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    needs:
      - check-input
      - set-value
    name: Build and Deploy - ${{ matrix.targetPlatform }} - ${{ inputs.build-mode }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS
          - Android
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set FTP json key
        run: |
          echo "FTP_JSON_KEY=${{ inputs.build-mode == 'Release' && 'RELEASE_FTP_JSON' || 'TEST_FTP_JSON' }}" >> $GITHUB_ENV
      - name: Create FTP config
        id: create-ftp-config
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "ftp_config.json"
          json:  ${{ secrets[env.FTP_JSON_KEY] }}
      - name: Create Google json key
        if: needs.set-value.outputs.GOOGLE_JSON_KEY_PATH != ''
        id: create-google-json-key
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: ${{ needs.set-value.outputs.GOOGLE_JSON_KEY_PATH }}
          json: ${{ secrets.GOOGLE_JSON_KEY }}
      - name: Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
          # Before
          echo "Disk space before:"
          df -h

          #echo "Listing 100 largest packages"
          #dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          #echo "Removing large packages"
          #sudo apt-get remove -y '^ghc-8.*'
          #sudo apt-get remove -y '^dotnet-.*'
          #sudo apt-get remove -y '^llvm-.*'
          #sudo apt-get remove -y 'php.*'
          #sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
          #sudo apt-get autoremove -y
          #sudo apt-get clean
          #df -h

          echo "Removing large directories"
          # https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
          rm -rf /usr/share/dotnet/

          # https://github.com/actions/virtual-environments/issues/709#issuecomment-612569242
          rm -rf "/usr/local/share/boost"
          rm -rf "$AGENT_TOOLSDIRECTORY"

          # After
          echo "Disk space after:"
          df -h 
      - name: Build - ${{ matrix.targetPlatform }}
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
#         https://game.ci/docs/docker/versions/
          customImage: ${{ matrix.targetPlatform == 'iOS' && 'unityci/editor:2021.3.38f1-ios-3.1.0' || 'unityci/editor:2021.3.38f1-android-3.1.0' }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: ${{ needs.set-value.outputs.BUILD_METHOD }}
          allowDirtyBuild: true
          manualExit: true
          customParameters: -ftpJsonFilePath ftp_config.json -buildInfoPath build_info.text -googleJsonKeyPath ${{ needs.set-value.outputs.GOOGLE_JSON_KEY_PATH }}
          volumes:
            - ${{ github.workspace }}:/github/workspace
      - name: Upload artifacts - ${{ matrix.targetPlatform }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.targetPlatform }}_${{ inputs.build-mode }}
          path: ./${{ needs.set-value.outputs.LOAD_DIR }}/${{ matrix.targetPlatform }}/*
      - name: Annotate with build info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          annotation=$(jq -c . build_info.text)
          
          check_run_id=$(curl --silent -X GET \
                  -H 'accept: application/vnd.github.v3+json' \
                  -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                  "https://api.github.com/repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA}/check-runs" | jq '.check_runs | .[0] | .id')
          
          curl --silent -X POST \
              -H 'accept: application/vnd.github.v3+json' \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H 'Content-Type: application/json' \
              -d "${annotation}" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/check-runs/${check_run_id}/annotations"