name: Uniprom Assets Build And Deploy

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: "Build mode : Test / Release"
        required: true

env:
  BUILD_MODE: ${{ github.event.inputs.build_mode }}
  # Release
  LOAD_RELEASE_DIR: "_UnipromReleaseServerData"
  BUILD_RELEASE_METHOD: "Uniprom.Editor.AssetBuilder.BuildRelease"
  # Test
  LOAD_TEST_DIR: "_UnipromTestServerData"
  BUILD_TEST_METHOD: "Uniprom.Editor.AssetBuilder.BuildTest"

jobs:
  check-input:
    name: Check Input
    runs-on: ubuntu-latest
    steps:
      - name: Check Value
        run: |
          if ${{ env.BUILD_MODE != 'Test' && env.BUILD_MODE != 'Release' }}; then
            echo ::error:: "Specify Test or Release. value: ${{ env.BUILD_MODE }}"
            exit 1
          else
            echo "Valid input value"
          fi

  set-value:
    needs: check-input
    name: Set Value - ${{ github.event.inputs.build_mode }}
    runs-on: ubuntu-latest
    outputs:
      LOAD_DIR: ${{ steps.set-value.outputs.LOAD_DIR}}
      BUILD_METHOD: ${{ steps.set-value.outputs.BUILD_METHOD}}
    steps:
      - name: Set Value
        id: set-value
        run: |
          if ${{ env.BUILD_MODE == 'Release' }}; then
            echo "LOAD_DIR=${{ env.LOAD_RELEASE_DIR }}" >> $GITHUB_OUTPUT
            echo "BUILD_METHOD=${{ env.BUILD_RELEASE_METHOD }}" >> $GITHUB_OUTPUT
          else
            echo "LOAD_DIR=${{ env.LOAD_TEST_DIR }}" >> $GITHUB_OUTPUT
            echo "BUILD_METHOD=${{ env.BUILD_TEST_METHOD }}" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    needs:
      - check-input
      - set-value
    name: Build and Deploy - ${{ matrix.targetPlatform }} - ${{ github.event.inputs.build_mode }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android
          - iOS
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set FTP json key
        run: |
          echo "FTP_JSON_KEY=${{ env.BUILD_MODE == 'Release' && 'RELEASE_FTP_JSON_STRING' || 'TEST_FTP_JSON_STRING' }}" >> $GITHUB_ENV
      - name: Create FTP config
        id: create-ftp-config
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "ftp_config.json"
          json:  ${{ secrets[env.FTP_JSON_KEY] }}
      - name: Cache
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - name: Build - ${{ matrix.targetPlatform }}
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
#         https://game.ci/docs/docker/versions/
          customImage: ${{ matrix.targetPlatform == 'iOS' && 'unityci/editor:2021.3.38f1-ios-3.1.0' || 'unityci/editor:2021.3.38f1-android-3.1.0' }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: ${{ needs.set-value.outputs.BUILD_METHOD }}
          allowDirtyBuild: true
          manualExit: true
          customParameters: -ftpJsonFilePath ftp_config.json
      - name: Upload artifacts - ${{ matrix.targetPlatform }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.targetPlatform }}_${{ env.BUILD_MODE }}
          path: ./${{ needs.set-value.outputs.LOAD_DIR }}/${{ matrix.targetPlatform }}/*